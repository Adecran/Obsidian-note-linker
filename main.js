/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var p=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var f=Object.prototype.hasOwnProperty;var x=(c,i)=>{for(var e in i)p(c,e,{get:i[e],enumerable:!0})},w=(c,i,e,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let n of b(i))!f.call(c,n)&&n!==e&&p(c,n,{get:()=>i[n],enumerable:!(t=E(i,n))||t.enumerable});return c};var y=c=>w(p({},"__esModule",{value:!0}),c);var T={};x(T,{default:()=>h});module.exports=y(T);var s=require("obsidian"),v={excludedFolders:[]},h=class extends s.Plugin{async onload(){console.log("Loading ConnectNotesPlugin"),await this.loadSettings(),this.addSettingTab(new u(this.app,this)),this.addRibbonIcon("search","Connect Notes",async t=>{new g(this.app,this.settings.excludedFolders,async n=>{let l=this.app.vault.getMarkdownFiles(),a=[];for(let r of l)if(!this.settings.excludedFolders.some(d=>r.path.startsWith(d)))try{(await this.app.vault.read(r)).toLowerCase().includes(n.toLowerCase())&&a.push(r)}catch(d){console.error(`Failed to read file ${r.path}`,d)}if(a.length===0){new s.Notice("No matching notes found.");return}let o=this.app.workspace.getActiveFile();if(!o){new s.Notice("No active note.");return}new m(this.app,o,a).open()}).open()}).addClass("connect-notes-ribbon-icon")}onunload(){console.log("Unloading ConnectNotesPlugin")}async loadSettings(){this.settings=Object.assign({},v,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},u=class extends s.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new s.Setting(e).setName("Excluded Folders").setDesc("Specify folders to exclude from search (comma-separated paths)").addTextArea(t=>t.setValue(this.plugin.settings.excludedFolders.join(", ")).onChange(async n=>{this.plugin.settings.excludedFolders=n.split(",").map(l=>l.trim()),await this.plugin.saveSettings()}))}},g=class extends s.Modal{constructor(e,t,n){super(e);this.excludedFolders=t,this.onSubmit=n}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:"Enter search term"});let t=e.createEl("input",{type:"text"});t.focus(),t.addEventListener("keyup",n=>{if(n.key==="Enter"){let l=t.value.trim();l.length>0&&(this.close(),this.onSubmit(l))}})}onClose(){let{contentEl:e}=this;e.empty()}},m=class extends s.Modal{constructor(e,t,n){super(e);this.currentFile=t,this.matchingFiles=n}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:"Select notes to link to:"});let t=e.createEl("form"),n=[];this.matchingFiles.forEach(a=>{let o=t.createEl("label",{cls:"link-modal-label"}),r=o.createEl("input",{type:"checkbox"});o.appendText(` ${a.basename}`),n.push({file:a,checkbox:r})});let l=t.createEl("button",{text:"Link Selected"});l.type="button",l.addEventListener("click",async()=>{let a=n.filter(o=>o.checkbox.checked).map(o=>o.file);if(a.length===0){new s.Notice("No notes selected.");return}try{let o=await this.app.vault.read(this.currentFile),r=`

`;a.forEach(F=>{r+=`[[${F.basename}]]
`});let d=o+r;await this.app.vault.modify(this.currentFile,d),new s.Notice("Links added!")}catch(o){console.error("Error updating file",o),new s.Notice("Failed to add links.")}this.close()}),t.appendChild(l),e.appendChild(t)}onClose(){let{contentEl:e}=this;e.empty()}};
